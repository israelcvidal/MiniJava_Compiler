options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(MiniJavaParser)
  public class MiniJavaParser {}
PARSER_END(MiniJavaParser)


// Insert a specification of a lexical analysis here. 
//Code based from example: web.cs.ucla.edu/classes/fall03/cs132/project/minijava.jj

SKIP: { //White space
	" "
	"\t"
	"\n"
	"\r"
	"\f"
}

SPECTIAL-TOKEN: { //Coment√°rios
	< SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
	< FORMAT_COMMENT: "/**" (["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*"))* "/" >
	< MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*")* "*"))* "/" >
}

TOKEN: { //Reserved words / markers
	//MARKERS
	< LPAREN: "(" >
	< RPAREN: ")" >
	< LSQPAREN: "[" >
	< RSQPAREN: "]" >
	< LBRACE: "{" >
	< RBRACE: "}" >
	< SEMICOLON: ";" >
	< DOT: "." >
	
	//ARITHMETIC OPERATORS
	< PLUS: "+" >
	< MINUS: "-" >
	< TIMES: "*" >
	< DIVIDED: "/" >
	< ASSIGN: "=" >

	//CONDITIONNAL
	< ELSE: "else" >
	< IF: "if" >
	< FALSE: "false" >
	< TRUE: "true" >

	//LOGIC OPERATORS 
	< AND: "&&" >
	< NOT: "!" >
	< LT: "<" >
	< GT: ">" >
	< EQUALS: "==" >

	//VARIABLES TYPES
	< BOOLEAN: "boolean" >
	< INTEGER: "int" >
	< VOID: "void" >
	< STRING: "String" >

	//OO TOKENS
	< CLASS: "class" >
	< INTERFACE: "interface" >
	< EXTENDS: "extends" >
	< MAIN: "main" >
	< NEW: "new" >
	< PUBLIC: "public" >
	< THIS: "this" >
	
	
	//MISCELANEOUS
	< PRINT: "System.out.println" >
	< RETURN: "return" >
	< WHILE: "while" >
	< LENGTH: "length" >
	
	//Literals
	<  INTEGER_LITERAL: ( ["1"-"9"] (["0"-"9"])* | "0" ) >

	//Identifiers
	< IDENTIFIER: < LETTER > (< LETTER >| < DIGIT >)* >

	< #LETTER:
		[
			"\u0024", //unicode from to $
			"\u0041"-"\u005a", //unicode form to A-Z
			"\u005f", //unicode from to _
			"\u0061"-"\u007a", //unicode from to a-z
		]
	>	

	< #DIGIT:
      	[
	       "\u0030"-"\u0039" //unicode form of 0-9 digit character 
      	]
  	>
}

// The following is a simple grammar that will allow you
// to test the generated lexer.


void Goal() :
{}
{
  ( MiniJavaToken() )*
  <EOF>
}

void MiniJavaToken():
{}
{
  "class" | "{" | "public" | "static" | "void" |
  "main" | "(" | "String"  | "[" | "]" | ")" | "}" | "extends" | ";"
  | "return" | "," | "int" | "boolean" | "=" | "if" | "else" | "while"
  | "System.out.println" | "&&" | "<" | "+" | "-" | "*" | "." |
  "length" |  "true" | "false" | "this" | "new" |
  "!"
}


