options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(MiniJavaParser)
  public class MiniJavaParser {}
PARSER_END(MiniJavaParser)


// Insert a specification of a lexical analysis here. 
//Code based from example: web.cs.ucla.edu/classes/fall03/cs132/project/minijava.jj

SKIP: { //White space
	" "
	|"\t"
	|"\n"
	|"\r"
	|"\f"
}

SPECIAL_TOKEN : { //Comments
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN: { //Reserved words / markers
	//MARKERS
	< LPAREN: "(" >
	|< RPAREN: ")" >
	|< LSQPAREN: "[" >
	|< RSQPAREN: "]" >
	|< LBRACE: "{" >
	|< RBRACE: "}" >
	|< SEMICOLON: ";" >
	|< DOT: "." >
	
	//ARITHMETIC OPERATORS
	|< PLUS: "+" >
	|< MINUS: "-" >
	|< TIMES: "*" >
	|< DIVIDED: "/" >
	|< ASSIGN: "=" >

	//CONDITIONNAL
	|< ELSE: "else" >
	|< IF: "if" >
	|< FALSE: "false" >
	|< TRUE: "true" >

	//LOGIC OPERATORS 
	|< AND: "&&" >
	|< NOT: "!" >
	|< LT: "<" >
	|< GT: ">" >
	|< EQUALS: "==" >

	//VARIABLES TYPES
	|< BOOLEAN: "boolean" >
	|< INTEGER: "int" >
	|< VOID: "void" >
	|< STRING: "String" >

	//OO TOKENS
	|< CLASS: "class" >
	|< INTERFACE: "interface" >
	|< EXTENDS: "extends" >
	|< MAIN: "main" >
	|< NEW: "new" >
	|< PUBLIC: "public" >
	|< THIS: "this" >
	
	
	//MISCELANEOUS
	|< PRINT: "System.out.println" >
	|< RETURN: "return" >
	|< WHILE: "while" >
	|< LENGTH: "length" >
	
	//Literals
	|<  INTEGER_LITERAL: ( ["1"-"9"] (["0"-"9"])* | "0" ) >

	//Identifiers
	|< IDENTIFIER: < LETTER > (< LETTER >| < DIGIT >)* >

	|< #LETTER:
		[
			"$", //unicode from to $
			"A"-"Z", //unicode form to A-Z
			"_", //unicode from to _
			"a"-"z" //unicode from to a-z
		]
	>	

	|< #DIGIT:
      	[
	       "0"-"9" //unicode form of 0-9 digit character 
      	]
  	>
}

// The following is a simple grammar that will allow you
// to test the generated lexer.


void Goal() :
{}
{
  Program()
}

void Program() :
{}
{
	MainClass()
	( ClassDeclaration() )*
	<EOF>
}

void MainClass() :
{}
{
	"class" Identifier() "{" "public" "static" "void" "main" "(" "String" "[" "]" Identifier() ")" "{" Statement() "}" "}"
}

void ClassDeclaration() :
{}
{
	"class" Identifier() ( "extends" Identifier() )? "{" ( VarDeclaration() )* ( MethodDeclaration() )* "}"
}

void VarDeclaration() :
{}
{
	Type() Identifier() ";"
}

void MethodDeclaration() :
{}
{
	"public" Type() Identifier() "(" ( Type() Identifier() ( "," Type() Identifier() )* )? ")" "{" ( VarDeclaration() )* ( Statement() )* "return" Expression() ";" "}"
}

void Type() :
{}
{
	"int" "[" "]"
	|"boolean"
	| "int"
	| Identifier()
}

void Statement() :
{}
{
	"{" ( Statement() )* "}"
	| "if" "(" Expression() ")" Statement() "else" Statement()
	| "while" "(" Expression() ")" Statement()
	| "System.out.println" "(" Expression() ")" ";"
	| Identifier() "=" Expression() ";"
	| Identifier() "[" Expression() "]" "=" Expression() ";"
}


void Expression() :
{}
{
	 Expression() ( "&&" | "<" | "+" | "-" | "*" ) Expression()
	| Expression() "[" Expression() "]"
	| Expression() "." "length"
	| Expression() "." Identifier() "(" ( Expression() ( "," Expression() )* )? ")"
	| <INTEGER_LITERAL>
	| "true"
	| "false"
	| Identifier()
	| "this"
	| "new" "int" "[" Expression() "]"
	| "new" Identifier() "(" ")"
	| "!" Expression()
	| "(" Expression() ")"
}

void Identifier() :
{}
{
	< IDENTIFIER >
}
void MiniJavaToken():
{}
{
  "class" | "{" | "public" | "static" | "void" |
  "main" | "(" | "String"  | "[" | "]" | ")" | "}" | "extends" | ";"
  | "return" | "," | "int" | "boolean" | "=" | "if" | "else" | "while"
  | "System.out.println" | "&&" | "<" | "+" | "-" | "*" | "." |
  "length" |  "true" | "false" | "this" | "new" |
  "!"
}


