options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(MiniJavaParser)
  public class MiniJavaParser {}
PARSER_END(MiniJavaParser)

SKIP: { //White space
	" "
	|"\t"
	|"\n"
	|"\r"
	|"\f"
}

SPECIAL_TOKEN : { //Comments
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN: { //Reserved words
	//MARKERS
	< LPAREN: "(" >
	|< RPAREN: ")" >
	|< LSQPAREN: "[" >
	|< RSQPAREN: "]" >
	|< LBRACE: "{" >
	|< RBRACE: "}" >
	|< SEMICOLON: ";" >
	|< COMMA : "," >
	|< DOT: "." >
	
	//ARITHMETIC OPERATORS
	|< PLUS: "+" >
	|< MINUS: "-" >
	|< TIMES: "*" >
	|< DIVIDED: "/" >
	|< ASSIGN: "=" >

	//CONDITIONNAL
	|< ELSE: "else" >
	|< IF: "if" >
	|< FALSE: "false" >
	|< TRUE: "true" >

	//LOGIC OPERATORS 
	|< AND: "&&" >
	|< NOT: "!" >
	|< LT: "<" >
	|< GT: ">" >
	|< EQUALS: "==" >

	//VARIABLES TYPES
	|< BOOLEAN: "boolean" >
	|< INTEGER: "int" >
	
	//OO TOKENS
	|< CLASS: "class" >
	|< EXTENDS: "extends" >
	|< MAIN: "main" >
	|< NEW: "new" >
	|< PUBLIC: "public" >
	|< THIS: "this" >
	|< STATIC: "static">	
	
	//MISCELANEOUS
	|< PRINT: "System.out.println" >
	|< RETURN: "return" >
	|< WHILE: "while" >
	|< LENGTH: "length" >
	|< STRING: "String" >
	|< VOID: "void" >
	
	//Literals
	|<  INTEGER_LITERAL: ( ["1"-"9"] (<DIGIT >)* | "0" ) >

	//Identifiers
	|< IDENTIFIER: < LETTER > (< LETTER >| < DIGIT >)* >

	|< #LETTER:
		[
			"$",
			"A"-"Z",
			"_",
			"a"-"z"
		]
	 >	

	|< #DIGIT:
      	[
	       "0"-"9" 
      	]
  	 >
}

void Goal() :
{}
{
  Program()
}

void Program() :
{}
{
	MainClass()
	( ClassDeclaration() )*
	<EOF>
}

void MainClass() :
{}
{
	< CLASS > < IDENTIFIER > < LBRACE > < PUBLIC > < STATIC > < VOID > < MAIN > < LPAREN > < STRING > < LSQPAREN > < RSQPAREN > < IDENTIFIER > < RPAREN > < LBRACE > Statement() < RBRACE > < RBRACE >
}

void ClassDeclaration() :
{}
{
	< CLASS > < IDENTIFIER > ( < EXTENDS > < IDENTIFIER > )? < LBRACE > ( VarDeclaration() )* ( MethodDeclaration() )* < RBRACE >
}

void VarDeclaration() :
{}
{
	Type() < IDENTIFIER > < SEMICOLON >
}

void MethodDeclaration() :
{}
{
	< PUBLIC > Type() < IDENTIFIER > < LPAREN > FormalList() < RPAREN > < LBRACE > ( LOOKAHEAD(2) VarDeclaration() )* ( Statement() )* < RETURN > Expression() < SEMICOLON > < RBRACE >
}

void FormalList() :
{}
{
	Type() < IDENTIFIER > (FormalRest())*
}

void FormalRest() :
{}
{
	"," Type() < IDENTIFIER >
}

void Type() :
{}
{
	< INTEGER > ( < LSQPAREN > < RSQPAREN > ) ?
	|< BOOLEAN >
	| < IDENTIFIER >
}

void Statement() :
{}
{
	< LBRACE > ( Statement() )* < RBRACE >
	| < IF > < LPAREN > Expression() < RPAREN > Statement() < ELSE > Statement()
	| < WHILE > < LPAREN > Expression() < RPAREN > Statement()
	| < PRINT > < LPAREN > Expression() < RPAREN > < SEMICOLON >
	| < IDENTIFIER >	(< ASSIGN > Expression() < SEMICOLON > |
						 < LSQPAREN > Expression() < RSQPAREN > < ASSIGN > Expression() < SEMICOLON >
					)
}

void Expression() :
{}
{
	 <INTEGER_LITERAL> Expression_() |
	 < TRUE > Expression_() |
	 < FALSE > Expression_() |
	 < IDENTIFIER > Expression_() |
	 < THIS > Expression_() |
	 < NEW > (  < INTEGER > < LSQPAREN > Expression() < RSQPAREN > Expression_() |
	 			< IDENTIFIER > < LPAREN > < RPAREN > Expression_() ) |
	 < NOT > Expression() Expression_() |
	 < LPAREN > Expression() < RPAREN > Expression_()
  	
}

void Expression_() :
{}
{
	(	  (< AND > | < LT > | < PLUS > | < MINUS > | < TIMES >) Expression() Expression_() |
	< LSQPAREN > Expression() < RSQPAREN > Expression_() |
	< DOT > ( < LENGTH > Expression_() |
			  < IDENTIFIER > < LPAREN > ExpList() < RPAREN > Expression_()))?
}

void ExpList() :
{}
{
	( Expression() ( ExpRest() )* )
}

void ExpRest() :
{}
{
	< COMMA > Expression()

}

void MiniJavaToken():
{}
{
  < CLASS > | < LBRACE > | < PUBLIC > | < STATIC > | < VOID > |
  < MAIN > | < LPAREN > | < STRING >  | < LSQPAREN > | < RSQPAREN > | < RPAREN > | < RBRACE > | < EXTENDS > | < SEMICOLON >
  | < RETURN > | < COMMA > | < INTEGER > | < BOOLEAN > | < ASSIGN > | < IF > | < ELSE > | < WHILE >
  | < PRINT > | < AND > | < LT > | < PLUS > | < MINUS > | < TIMES > | < DOT > |
  < LENGTH > |  < TRUE > | < FALSE > | < THIS > | < NEW > |
  < NOT >
}


